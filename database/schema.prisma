generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DB_URI")
  // directUrl = env("NEXT_PUBLIC_DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // Optional for WebAuthn support
  buckets       Bucket[]
  tags          Tag[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}


model Session {
  id          String    @id @default(cuid()) 
  userId      String    
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  browserInfo Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  endedAt     DateTime?
}

model Tag {
  id          String       @id @default(cuid())
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bucketItems BucketItem[]
}

model Bucket {
  id         String       @id @default(cuid())
  name       String
  color      String
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemCount  Int          @default(0)
  items      BucketItem[]
  priority   Int          @default(0)
  isFavorite Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model BucketItem {
  id          String   @id @default(cuid())
  bucketId    String
  bucket      Bucket   @relation(fields: [bucketId], references: [id], onDelete: Cascade)
  tags        Tag[]
  url         String
  title       String
  description String?
  priority    Int      @default(0)
  isFavorite  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Visitor {
  id          String            @id @default(cuid())
  itemClicks  BucketItemClick[]
  browserInfo Json
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model BucketItemClick {
  id        String   @id @default(cuid())
  visitorId String
  visitor   Visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vault {
  id        String      @id @default(cuid())
  modelName String
  content   Json
  contentId String
  status    VaultStatus
  version   Int
}

enum VaultStatus {
  Deleted
  Updated
}
